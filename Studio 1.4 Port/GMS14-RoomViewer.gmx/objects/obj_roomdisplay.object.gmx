<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = -1;

currentRoom = 0;

l = obj_loader; // Simplify the loader name, make a permanent reference to it

if(!l.loaded){
    log("Loader hasn't loaded data file. Room display cannot work.");
    exit;
}

viewX = 0;
viewY = 0;

ready = false;
uiVisible = true;

drawObjects = true;
drawTiles = true;
drawBackgrounds = true;

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls

// Movement
repeat(keyboard_check(ord("X")) + 1){
	if(keyboard_check(vk_right))
		viewX += 5;
	if(keyboard_check(vk_left))
		viewX -= 5;
	if(keyboard_check(vk_up))
		viewY -= 5;
	if(keyboard_check(vk_down))
		viewY += 5;
}

// Tiles, objects, and backgrounds
if(keyboard_check_pressed(ord("T")))
	drawTiles = !drawTiles;
if(keyboard_check_pressed(ord("O")))
	drawObjects = !drawObjects;
if(keyboard_check_pressed(ord("B")))
	drawBackgrounds = !drawBackgrounds;
	
// Move forward one room
if(keyboard_check_pressed(vk_space) &amp;&amp; currentRoom &lt; array_height_2d(l.rooms) - 1){
	currentRoom++;
	event_user(0);
}

// Move back one room
if(keyboard_check_pressed(vk_shift) &amp;&amp; currentRoom &gt; 0){
	currentRoom--;
	event_user(0);
}

// Hide menu
if(keyboard_check_pressed(ord("C"))){
	uiVisible = !uiVisible;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update room data

// Reset surface
if(surface_exists(surf))
	surface_free(surf);
surf = -1;

// Reset the active variables
activeView = undefined;
if(ready)
	ds_grid_destroy(activeBgs);
activeBgs = ds_grid_create(12, 12);
activeTiles = undefined;
activeObjects = undefined;

// Get the views
var views = l.rooms[currentRoom, 18];

// Find the first view, and if there isn't one
var i;
noView = false;
for(i = 0; i &lt; array_height_2d(views); i++){ // Find the first active view, no need to get the rest
	if(views[i, 0] == true)
		break;
	if(i == array_height_2d(views) - 1)
		noView = true;
}

// Initialize view variables
if(noView){
	viewX = 0;
	viewY = 0;
	viewW = window_get_width();
	viewH = window_get_height();
	viewPW = viewW;
	viewPH = viewH;
} else {
	viewX = views[i, 1];
	viewY = views[i, 2];
	viewW = views[i, 3];
	viewH = views[i, 4];
	viewPW = views[i, 7];
	viewPH = views[i, 8];
}

activeView[0] = views[i];

// Load backgrounds
var bgs = l.rooms[currentRoom, 17];

var i;
hasActive = false;
for(i = 0; i &lt; array_height_2d(bgs); i++){
	if(bgs[i, 0] == true &amp;&amp; bgs[i, 2] &gt;= 0 &amp;&amp; bgs[i, 2] &lt; 100000){
		for(var j = 0; j &lt; 10; j++)
			activeBgs[# i, j] = bgs[i, j];
		hasActive = true;
	}
}

// Load tiles
activeTiles = l.rooms[currentRoom, 20];

// Load objects
activeObjects = l.rooms[currentRoom, 19];

// Tell the draw event that the variables are initialized
if(!ready)
	log("Room viewer ready");
ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear memory

ds_grid_destroy(activeBgs);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw room

// Make sure that the variables are initialized
if(!ready)
exit;

// Calculate scaling of viewport
var viewscaleW = viewPW / viewW;
var viewscaleH = viewPH / viewH;
if(l.defaultWindowWidth / viewW &gt; viewscaleW)
viewscaleW = l.defaultWindowWidth / viewW;
if(l.defaultWindowHeight / viewH &gt; viewscaleH)
viewscaleH = l.defaultWindowHeight / viewH;

// Draw background color if there is one
if(l.rooms[currentRoom, 7] == true){
draw_set_color(l.rooms[currentRoom, 6]);
draw_set_alpha(1);
draw_rectangle(0, 0, window_get_width(), window_get_height(), false);
}

// Create surface and clear
if(!surface_exists(surf)){
surf = surface_create(l.rooms[currentRoom, 2], l.rooms[currentRoom, 3]);
}
surface_set_target(surf);
draw_clear_alpha(c_black, 0);

// If there are backgrounds, draw them
if(hasActive){
// Loop through the backgrounds
if(drawBackgrounds)
//for(var i = ds_grid_height(activeBgs) - 1; i &gt;= 0; i--){
for(var i = 0; i &lt; ds_grid_height(activeBgs); i++){
var bgIndex = activeBgs[# i, 2];
// Check for these just in case
if(bgIndex &gt;= 0 &amp;&amp; bgIndex &lt; 100000 &amp;&amp; activeBgs[# i, 0] == true){
// Get variables from loader
var texOffset = l.backgrounds[bgIndex, 4];
var page = l.texpages[l.texpageIds[? texOffset], 10];
var texX = l.texpages[l.texpageIds[? texOffset], 0];
var texY = l.texpages[l.texpageIds[? texOffset], 1];
var texW = l.texpages[l.texpageIds[? texOffset], 2];
var texH = l.texpages[l.texpageIds[? texOffset], 3];
var roX = l.texpages[l.texpageIds[? texOffset], 4];
var roY = l.texpages[l.texpageIds[? texOffset], 5];

// Draw the background!
draw_sprite_part(l.spritesheets[page],0,texX,texY,texW,texH,activeBgs[# i, 3]+roX,activeBgs[# i, 4]+roY);
}
}
}

// Draw tiles
if(drawTiles)
for(var i = 0; i &lt; array_height_2d(activeTiles); i++){
if(activeTiles[i, 2] &gt;= 0 &amp;&amp; activeTiles[i, 2] &lt; 100000){
var texOffset = l.backgrounds[activeTiles[i, 2], 4];
var page = l.texpages[l.texpageIds[? texOffset], 10];
var texX = l.texpages[l.texpageIds[? texOffset], 0];
var texY = l.texpages[l.texpageIds[? texOffset], 1];
var roX = l.texpages[l.texpageIds[? texOffset], 4];
var roY = l.texpages[l.texpageIds[? texOffset], 5];
draw_sprite_part_ext(l.spritesheets[page],0,texX+activeTiles[i, 3],texY+activeTiles[i, 4],activeTiles[i, 5],activeTiles[i, 6],activeTiles[i, 0]+roX,activeTiles[i, 1]+roY,activeTiles[i, 9],activeTiles[i, 10],c_white,1);
}
}

// Draw objects
if(drawObjects)
for(var i = 0; i &lt; array_height_2d(activeObjects); i++){
if(activeObjects[i, 2] &lt; 0 || activeObjects[i, 2] &gt; 100000)
continue;
if(l.objects[activeObjects[i, 2], 1] == -1 || l.objects[activeObjects[i, 2], 1] &gt; 100000)
continue;
var texOffsets = l.sprites[l.objects[activeObjects[i, 2], 1], 12];
var page = l.texpages[l.texpageIds[? texOffsets[0]], 10];
var texX = l.texpages[l.texpageIds[? texOffsets[0]], 0];
var texY = l.texpages[l.texpageIds[? texOffsets[0]], 1];
var texW = l.texpages[l.texpageIds[? texOffsets[0]], 2];
var texH = l.texpages[l.texpageIds[? texOffsets[0]], 3];
var roX = l.texpages[l.texpageIds[? texOffsets[0]], 4];
var roY = l.texpages[l.texpageIds[? texOffsets[0]], 5];

draw_sprite_part_ext(l.spritesheets[page],0,texX,texY,texW,texH,activeObjects[i, 0]+roX,activeObjects[i, 1]+roY,activeObjects[i, 5],activeObjects[i, 6],c_white,1);
}

// Stop drawing to surface
surface_reset_target();

// Draw the surface to the screen, scaled and positioned by the view
draw_surface_ext(surf, -viewX, -viewY, viewscaleW, viewscaleH, 0, c_white, 1);

// If gui is not visible, don't draw it.
if(!uiVisible)
exit;

// Draw info text
draw_set_font(fnt_text);
var str = "Room: " + l.strings[? l.rooms[currentRoom, 0]] + " " + string(currentRoom + 1) + "/" + string(array_height_2d(l.rooms));
var mult = 1;
mult = (window_get_width() - 20) / string_width(str);
if(mult &gt; 1) mult = 1;
draw_set_color(c_black);
draw_text_transformed(8,8,str,mult,1,0);
draw_set_color(c_white);
draw_text_transformed(5,5,str,mult,1,0);

// Controls
draw_set_font(fnt_text_small);
draw_set_valign(fa_bottom);
draw_set_color(c_black);
draw_text(8,window_get_height() - 5,"Press [C] to toggle UI");
draw_set_color(c_white);
draw_text(7,window_get_height() - 6,"Press [C] to toggle UI");
draw_set_color(c_black);
draw_text(8,window_get_height() - 23,"Arrow keys to translate view");
draw_set_color(c_white);
draw_text(7,window_get_height() - 24,"Arrow keys to translate view");
draw_set_color(c_black);
draw_text(8,window_get_height() - 39,"Hold [X] to speed up movement");
draw_set_color(c_white);
draw_text(7,window_get_height() - 40,"Hold [X] to speed up movement");
draw_set_color(c_black);
draw_text(8,window_get_height() - 55,"Press spacebar to go to next room");
draw_set_color(c_white);
draw_text(7,window_get_height() - 56,"Press spacebar to go to next room");
draw_set_color(c_black);
draw_text(8,window_get_height() - 71,"Press shift to go to previous room");
draw_set_color(c_white);
draw_text(7,window_get_height() - 72,"Press shift to go to previous room");
draw_set_color(c_black);
draw_text(8,window_get_height() - 87,"[O], [T], and [B] disable objects,#tiles, and background visibility");
draw_set_color(c_white);
draw_text(7,window_get_height() - 88,"[O], [T], and [B] disable objects,#tiles, and background visibility");
draw_set_color(c_black);
draw_set_halign(fa_right);
draw_text(window_get_width() - 8,window_get_height() - 5,"colinator27 is not responsible for#any improper use of this program.");
draw_set_color(c_white);
draw_text(window_get_width() - 7,window_get_height() - 6,"colinator27 is not responsible for#any improper use of this program.");
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
